// Excercise#1

// THE CLIENT VERSION
// see No importing anything about web3 this is cuz we have added the line <script src="./node_modules/web3/dist/web3.min.js"></script> in index.html file
const rpcURL="HTTP://127.0.0.1:7545";// we need this cuz to ensure that we have address of functional blockchain in this case we have ganche's blocchain...
let Web3Isnt=new Web3(rpcURL);// Now this will allow you to talk with local or remote blockchain if connected succesfully...
console.log("Connected to: ",Web3Isnt);
/*
Now we are connected to ganache local blockchain
Now wwewill check the balnce of required address in present blockchain...
*/
let address="0xdcCFbf09784000e6b593BfF1cA6E8776882940A0";
//this will be the method you can access the balance of desired address...

Web3Isnt.eth.getBalance(address, function(err, amount) {
  if(err)
  {
    console.log("Value not found",err);
  }
  else{
    //console.log("balance in wei",amount);
    balanceInEther = Web3Isnt.utils.fromWei(amount, 'ether')
    //console.log("balance in ether is: ",balance);
    document.getElementById("ethValue").innerHTML=`The value in ether ${balanceInEther}`
  }
}
)

// Excercise#2

// web3 package is already imported so no need to use or import here now
// THE WEB VERSION...
/*
In this tutorial we will just call simple smart contract that will only read the function and will not perfrom
any transaction hat was written on remix IDE
For that following steps must be followed:

1. You need to creata any smart contract in remix IDE or any other IDE
2. Then you need to establish a blockchain in order to deploy that contract
3. In our case we have Ganache setup
4. We will delpoy our smart contract to ganache blockchain
5. Remeber to switch your EVM to ganache from metamask in order to connect your contract to ganache
6. When successfully deployed you will ahave ABI ready and conract's address genereted on ganache's blockchain where it has been delpoyed..
7. Now copy the ABI code which is basically a machine code converted to readable code and is used for calling for server side language.So, it basically work as interface between solidity and JS.

*/
const targetUrl="HTTP://127.0.0.1:7545";
let Web3Isnt=new Web3(targetUrl);
console.log("here is the connection instance",Web3Isnt);

// Now below statement is an ABI that we need to give 
const abi=[
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "adr",
				"type": "address"
			}
		],
		"name": "sendEther",
		"outputs": [],
		"stateMutability": "payable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "getAge",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "adr",
				"type": "address"
			}
		],
		"name": "showBalance",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	}
]
const address="0xeD7f1E65Ac4EAce332B7Bacbd88f89bcc5BC70F5";// Now this is the address of our contract that has been delpoyed on ganache blockchain...

const contract = new Web3Isnt.eth.Contract(abi, address);// Now new instance has been created for contract that is going to be executed
// and it contains 2 parameters i.e. abi that we defined earlier and address also defined earlier
console.log("Here is the contract's instance: ",abi,address);

// Now from here we will start using methods written in solidity
// first we need to understand the call method of web3. It means that you are calling those methods that are writtehn slidtu which 
// are just "view" means no fucntions being called that contains any transactions..
contract.methods.getAge().call((err,result)=>
{
    console.log("The age of deployer is",result)
    document.getElementById("message").innerHTML=`The age of deployer is ${result}`;
    
}
)
// > 140245398


// Excercise#3

/*
THE CONSOLE VERSION...
In this tutorial we will just call simple smart contract that will use the function which perfroms a transaction 
that was written on remix IDE
So this program will send ethers from one address to another...
Before that we were using a wallet (metamask) or through smart contract to send ethers from one account to another now this time we will be sending ethers from web3...
For that following steps must be followed:

1. You need to insatll another package of web3 that will allow us to execute those functions in smart contract that contains some transactions.
2. Use following command in CMD prompt in order to install the required package: "npm install ethereumjs-tx" for more info please visit: https://github.com/ethereumjs/ethereumjs-tx
3. NOW YOU HAVE TO ESTABLISH A BLOCKCHAIN OR access existanat blockchain so in our case we have used ganache
4. Now follow the code I have written...
*/

const EthereumTx = require('ethereumjs-tx').Transaction;// here we hae imported the transaction library...
const Web3=require("web3");// just for checking in the console if its working  otherwise for web browser no need for this
const targetUrl="HTTP://127.0.0.1:7545"
const Web3Isnt=new Web3(targetUrl);//connected...
console.log("Connected to:", Web3Isnt);

// this time we need private keys along with address cuz it will confrim that the target address has signed this contract
const sender="0xD63197CB46d193D192e544be0DaBEB57D1997437";// the initiater..
const senderPrivateKey="f656331205fcbf71cb98d234066725a4094acc25ab1e6f40cd72c9153c376d9d"

const receiver="0x05A17aAB3598d316F6b7a405890ecfDf346e5629";// the receiver...

const priavetKey1Buffer=Buffer.from(senderPrivateKey,'hex');// this will actually convert your hexadecimal key to binary representation...


// we can also check the fromat here:
console.log("The Key ",senderPrivateKey," has been conveted to ",priavetKey1Buffer);
console.log("end here...")

// Now here we will be using the method of web3 that will perform transactions
Web3Isnt.eth.getTransactionCount(sender, (err,txCount)=>
{
    //here we need to consider the architecture of the transaction i.e. when we send ethers we need nounce, the reciever address, the amount, gas price and the gas limit..
    // as the metamask do that for us....
    const txObject={
    nonce: Web3Isnt.utils.toHex(txCount),//as you can see we have assigned "txCount" which is transaction count to "nounce" in order to calculate the number of transactions
    to: receiver,
    value: Web3Isnt.utils.toHex(Web3Isnt.utils.toWei("4", 'ether')), 
    gasLimit: Web3Isnt.utils.toHex(21000),
    gasPrice: Web3Isnt.utils.toHex(Web3Isnt.utils.toWei("10",'gwei'))
}// dictionary decalred....
const tx= new EthereumTx(txObject);// the we have intatitated "ethereumjs-tx" 's package here in order to use its methods... 
// previously tarnsaction was initiated now time to sign it so that it can be executed succesully...
tx.sign(priavetKey1Buffer);// the sender address will signed it to perform transaction successfully

const serliaziedTx=tx.serialize();
const raw = '0x' + serliaziedTx.toString('hex');
// Now it has been signed
// Now we have to send the signed transaction to desired address
Web3Isnt.eth.sendSignedTransaction(raw,(err,txHash)=>
{
console.log("The Hash of Transaction is :", txHash);
}
)// this will return the hash of signedtransaction so if transaction's hash generated means tranaction has been successful...
}
//for more info about such transaction mechanism follow: https://github.com/ethereumjs/ethereumjs-tx
)

//Excercise # 4-1

/*
Previously in "index3.js" where we have just read the function from the deployed smart contract. We are using the same concept 
here but this time we will be doing some transaction to have more insights about deployement of smart contract using web3.
*/

//import stuff...
var Web3=require("web3");// just like an import
var Tx = require('ethereumjs-tx').Transaction


const targetUrl="HTTP://127.0.0.1:7545";
let Web3Isnt=new Web3(targetUrl);
//console.log("here is the connection instance",Web3Isnt);
// This time we need the deployer's address
const ownerAddress="0xD63197CB46d193D192e544be0DaBEB57D1997437";
const privateKey1="f656331205fcbf71cb98d234066725a4094acc25ab1e6f40cd72c9153c376d9d";

const contractAddress="0xF2ea0E180F51A8a129A28c1041D1956808832Ac6"// contracts address that has been delpoyed on blockchain...

const abi=[
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "adr",
				"type": "address"
			}
		],
		"name": "sendEther",
		"outputs": [],
		"stateMutability": "payable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "nm",
				"type": "string"
			}
		],
		"name": "setName",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "getAge",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "getName",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "adr",
				"type": "address"
			}
		],
		"name": "showBalance",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	}
]

// Now creating buffer for our private key of owner/delpoyer
const priavetKey1Buffer=Buffer.from(privateKey1,'hex');

// Now we need method for to access contract's method through web3...
const contract = new Web3Isnt.eth.Contract(abi, contractAddress);

//
Web3Isnt.eth.getTransactionCount(ownerAddress, (err1,txCount)=>
{
    if(err1){
        console.log("Could'nt initiate transaction")
    }

    else{
    // Crete Transaction....
    const txObject={
        nonce: Web3Isnt.utils.toHex(txCount),//as you can see we have assigned "txCount" which is transaction count to "nounce" in order to calculate the number of transactions
        gasLimit: Web3Isnt.utils.toHex(100000),
        gasPrice: Web3Isnt.utils.toHex(Web3Isnt.utils.toWei("20",'gwei')),
        to:contractAddress,// this is necessary cuz we will not use any addrress but will broadcast to all network...
        data: contract.methods.setName("Nino").encodeABI(),// this time we need a transactional method and will encode it to ABI
    };

    //Sign the transaction...
    const tx = new Tx(txObject);// If we are using our local blockchain as in this case ganaxhe we dont need extra parameters
    // but if use remote blockchainnlike Inufura's ropsten then we need to have chain id and bla bla
    // see this for more details: 
    tx.sign(priavetKey1Buffer);

    const serializedTx = tx.serialize()
    const raw = '0x' + serializedTx.toString('hex')

    console.log(txObject);
    // Broadcast the transaction
    Web3Isnt.eth.sendSignedTransaction(raw, (err, txHash) => 
    {
        if(err)
        {
            console.log("Could'nt make transaction!",err)
        }
        else
        {
            console.log('Transaction successfull !! txHash is: ', txHash)
        }
    
    // Now go check etherscan to see the transaction!
    })

}})
/*
Theonly diference between index4.js and this excercise is that this excercise uses data transaction while index4.js used value
transaction...
*/

// Excercise # 4-2

/*
The only changes we have made in this part 2 of excercise 4 is that instead of encoding the data from here
we will simply assign the bytcode from remix IDE to the data section of "txObject"
For that:
We had removed the abi, removed Contract's address and removed the instance of contract that was used to call methods
*/

//import stuff...
var Web3=require("web3");// just like an import
var Tx = require('ethereumjs-tx').Transaction


const targetUrl="HTTP://127.0.0.1:7545";
let Web3Isnt=new Web3(targetUrl);

const ownerAddress="0xD63197CB46d193D192e544be0DaBEB57D1997437";
const privateKey1="f656331205fcbf71cb98d234066725a4094acc25ab1e6f40cd72c9153c376d9d";


var theBytcode="601c60005560c0604052600c60808190526b4d7564616262697220416c6960a01b60a09081526100329160019190610045565b5034801561003f57600080fd5b506100d8565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061008657805160ff19168380011785556100b3565b828001600101855582156100b3579182015b828111156100b3578251825591602001919060010190610098565b506100bf9291506100c3565b5090565b5b808211156100bf57600081556001016100c4565b610460806100e76000396000f3fe60806040526004361061004a5760003560e01c806317d7de7c1461004f57806348c981e2146100d9578063967e6e65146101015780639c080f5d14610128578063c47f00271461015b575b600080fd5b34801561005b57600080fd5b5061006461020e565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561009e578181015183820152602001610086565b50505050905090810190601f1680156100cb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6100ff600480360360208110156100ef57600080fd5b50356001600160a01b03166102a3565b005b34801561010d57600080fd5b506101166102dc565b60408051918252519081900360200190f35b34801561013457600080fd5b506101166004803603602081101561014b57600080fd5b50356001600160a01b03166102e2565b34801561016757600080fd5b506100646004803603602081101561017e57600080fd5b81019060208101813564010000000081111561019957600080fd5b8201836020820111156101ab57600080fd5b803590602001918460018302840111640100000000831117156101cd57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506102ef945050505050565b60018054604080516020601f600260001961010087891615020190951694909404938401819004810282018101909252828152606093909290918301828280156102995780601f1061026e57610100808354040283529160200191610299565b820191906000526020600020905b81548152906001019060200180831161027c57829003601f168201915b5050505050905090565b6040516001600160a01b038216903480156108fc02916000818181858888f193505050501580156102d8573d6000803e3d6000fd5b5050565b60005490565b6001600160a01b03163190565b8051606090610305906001906020850190610397565b5060018054604080516020600284861615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561038b5780601f106103605761010080835404028352916020019161038b565b820191906000526020600020905b81548152906001019060200180831161036e57829003601f168201915b50505050509050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106103d857805160ff1916838001178555610405565b82800160010185558215610405579182015b828111156104055782518255916020019190600101906103ea565b50610411929150610415565b5090565b5b80821115610411576000815560010161041656fea2646970667358221220aea8a1a5df4d82dc55f74fc212ee6d87e48548c0e0be1708fe4ce87bf5471f6664736f6c634300060c0033"



const theBytcodeBuffer=Buffer.from(theBytcode,'hex');

// Now creating buffer for our private key of owner/delpoyer
const priavetKey1Buffer=Buffer.from(privateKey1,'hex');

//
Web3Isnt.eth.getTransactionCount(ownerAddress, (err1,txCount)=>
{
    if(err1){
        console.log("Could'nt initiate transaction")
    }

    else{
    // Crete Transaction....
    const txObject={
        nonce: Web3Isnt.utils.toHex(txCount),
        gasLimit: Web3Isnt.utils.toHex(1000000),
        gasPrice: Web3Isnt.utils.toHex(Web3Isnt.utils.toWei("10",'gwei')),
        //removed "to" from here...
        data: theBytcodeBuffer// Here we made a change
    };

    //Sign the transaction...
    const tx = new Tx(txObject);
    
    tx.sign(priavetKey1Buffer);

    const serializedTx = tx.serialize()
    const raw = '0x' + serializedTx.toString('hex')

    console.log(txObject);
    // Broadcast the transaction
    Web3Isnt.eth.sendSignedTransaction(raw, (err, txHash) => 
    {
        if(err)
        {
            console.log("Could'nt make transaction!",err)
        }
        else
        {
            console.log('Transaction successfull !! txHash is: ', txHash)
        }

    })

}})

Excercise # 5

/*
The only changes we have made in this part 3 of excercise 4 is that we have created a recipt of the transaction and for that
we just used the method of sendSignedTransaction's "then()" method
*/

//import stuff...
var Web3=require("web3");// just like an import
var Tx = require('ethereumjs-tx').Transaction


const targetUrl="HTTP://127.0.0.1:7545";
let Web3Isnt=new Web3(targetUrl);

const ownerAddress="0xD63197CB46d193D192e544be0DaBEB57D1997437";
const privateKey1="f656331205fcbf71cb98d234066725a4094acc25ab1e6f40cd72c9153c376d9d";


var theBytcode="601c60005560c0604052600c60808190526b4d7564616262697220416c6960a01b60a09081526100329160019190610045565b5034801561003f57600080fd5b506100d8565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061008657805160ff19168380011785556100b3565b828001600101855582156100b3579182015b828111156100b3578251825591602001919060010190610098565b506100bf9291506100c3565b5090565b5b808211156100bf57600081556001016100c4565b610460806100e76000396000f3fe60806040526004361061004a5760003560e01c806317d7de7c1461004f57806348c981e2146100d9578063967e6e65146101015780639c080f5d14610128578063c47f00271461015b575b600080fd5b34801561005b57600080fd5b5061006461020e565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561009e578181015183820152602001610086565b50505050905090810190601f1680156100cb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6100ff600480360360208110156100ef57600080fd5b50356001600160a01b03166102a3565b005b34801561010d57600080fd5b506101166102dc565b60408051918252519081900360200190f35b34801561013457600080fd5b506101166004803603602081101561014b57600080fd5b50356001600160a01b03166102e2565b34801561016757600080fd5b506100646004803603602081101561017e57600080fd5b81019060208101813564010000000081111561019957600080fd5b8201836020820111156101ab57600080fd5b803590602001918460018302840111640100000000831117156101cd57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506102ef945050505050565b60018054604080516020601f600260001961010087891615020190951694909404938401819004810282018101909252828152606093909290918301828280156102995780601f1061026e57610100808354040283529160200191610299565b820191906000526020600020905b81548152906001019060200180831161027c57829003601f168201915b5050505050905090565b6040516001600160a01b038216903480156108fc02916000818181858888f193505050501580156102d8573d6000803e3d6000fd5b5050565b60005490565b6001600160a01b03163190565b8051606090610305906001906020850190610397565b5060018054604080516020600284861615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561038b5780601f106103605761010080835404028352916020019161038b565b820191906000526020600020905b81548152906001019060200180831161036e57829003601f168201915b50505050509050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106103d857805160ff1916838001178555610405565b82800160010185558215610405579182015b828111156104055782518255916020019190600101906103ea565b50610411929150610415565b5090565b5b80821115610411576000815560010161041656fea2646970667358221220aea8a1a5df4d82dc55f74fc212ee6d87e48548c0e0be1708fe4ce87bf5471f6664736f6c634300060c0033"



const theBytcodeBuffer=Buffer.from(theBytcode,'hex');

// Now creating buffer for our private key of owner/delpoyer
const priavetKey1Buffer=Buffer.from(privateKey1,'hex');

//
Web3Isnt.eth.getTransactionCount(ownerAddress, (err1,txCount)=>
{
    if(err1){
        console.log("Could'nt initiate transaction")
    }

    else{
    // Crete Transaction....
    const txObject={
        nonce: Web3Isnt.utils.toHex(txCount),
        gasLimit: Web3Isnt.utils.toHex(1000000),
        gasPrice: Web3Isnt.utils.toHex(Web3Isnt.utils.toWei("10",'gwei')),
        //removed "to" from here...
        data: theBytcodeBuffer// Here we made a change
    };

    //Sign the transaction...
    const tx = new Tx(txObject);
    
    tx.sign(priavetKey1Buffer);

    const serializedTx = tx.serialize()
    const raw = '0x' + serializedTx.toString('hex')

    console.log(txObject);
    // Broadcast the transaction
    Web3Isnt.eth.sendSignedTransaction(raw, (err, txHash) => 
    {
        if(err)
        {
            console.log("Could'nt make transaction!",err)
        }
        else
        {
            console.log('Transaction successfull !! txHash is: ', txHash)
        }

    }).then(recipt=>{
        console.log(recipt)
        console.log(recipt.ownerAddress)
    })
/*
In this excercsie we will be using events...
*/

//import stuff...
var Web3=require("web3");// just like an import
var Tx = require('ethereumjs-tx').Transaction


const targetUrl="HTTP://127.0.0.1:7545";
let Web3Isnt=new Web3(targetUrl);

const ownerAddress="0xD63197CB46d193D192e544be0DaBEB57D1997437"

const contractAddress="0xD4fFeDF637702d06091FBa99522D227aCfEdd85D"

const abi=[
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": false,
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"name": "logString",
		"type": "event"
	},
	{
		"inputs": [],
		"name": "fireEvent",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "nonpayable",
		"type": "function"
	}
]

const contract = new Web3Isnt.eth.Contract(abi, contractAddress);

contract.getPastEvents(
    "AllEvents",
{fromBlock:142,
toBlock:144
},
(err,events)=>{
    console.log("Events are",events)

}
)


}})

#Excercise # 6

